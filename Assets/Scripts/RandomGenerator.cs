using UnityEngine;
using Random = System.Random;

namespace ProceduralCity.Utils
{
    /// <summary>
    /// Random generator with a random seed (seed == 0) or set seed (seed != 0).
    /// </summary>
    public class RandomGenerator : MonoBehaviour
    {
        /// <summary>
        /// The seed for this random generator.
        /// </summary>
        [SerializeField]
        private int _seed = 0;

        /// <summary>
        /// Random instance.
        /// </summary>
        private static Random _random = null;

        /// <summary>
        /// Returns the random instance.
        /// </summary>
        public Random Random {
            get {
                if (_random == null) ResetRandom();
                return _random;
            }
        }

        /// <summary>
        /// Returns a random integer between <b>0</b> and <b>maxValue</b> (<i>exclusive</i>).
        /// </summary>
        public int Next(int maxValue) => Random.Next(maxValue);

        /// <summary>
        /// Returns a random integer between given <b>minValue</b> (<i>inclusive</i>) and <b>maxValue</b> (<i>exclusive</i>).
        /// </summary>
        public int Next(int minValue, int maxValue) => Random.Next(minValue, maxValue);

        /// <summary>
        /// Sets the seed for and resets this random generator.
        /// </summary>
        /// <param name="seed">The seed to set for this random generator.</param>
        public void SetSeed(int seed)
        {
            _seed = seed;
            ResetRandom();
        }

        /// <summary>
        /// Resets the random generator by using the current seed. If seed is '0' then a seed <br/> randomly generated by  
        /// using <see cref="UnityEngine.Random.RandomRange(int, int)"/>.
        /// <para> The range of a randomly generated seed is from <b>0</b> to <b>1000000</b>. </para>
        /// </summary>
        public void ResetRandom() => _random = _seed == 0 ? new Random(UnityEngine.Random.Range(0, 1000001)) : new Random(_seed);
    }
}